module Main (module Main) where

import Control.Monad (forM_)

import Language.LIMA
import Language.LIMA.Graph
import Language.LIMA.C
import Language.Sally

import Periodic

-- | Atoms to compile
as :: [Atom ()]
as = [ex1, ex2, ex3, ex4]

main :: IO ()
main = do
  let nm i = "ex" ++ show i
  forM_ (zip [1..] as) $ \(i,a) -> do
    compileToC (nm i) a
    let prefix = "periodic_" ++ nm i
    compileToSally prefix defaultCfg (prefix ++ ".mcmt") a Nothing
    graphAtom prefix ex1


-- C Code Generator Utilities --------------------------------------------

-- | Invoke the atom compiler, generating 'om1.{c,h}'
-- Also print out info on the generated schedule.
compileToC :: Name -> Atom () -> IO ()
compileToC nm atm = do
  res <- compile nm cfg atm
  putStrLn $ reportSchedule (compSchedule res)
  where
    cfg = defaults { cCode = prePostCode nm }

-- | Custom pre-post code for generated C
prePostCode :: Name -> [Name] -> [Name] -> [(Name, Type)] -> (String, String)
prePostCode nm _ _ _ =
  ( unlines [ "#include <stdio.h>"
            , "#include <unistd.h>"
            , ""
            , "// ---- BEGIN of source automatically generated by Atom ----"
            ]
  , unlines [ "// ---- END of source automatically generated by Atom ----"
            , ""
            , "int main(int argc, char **argv) {"
            , "  while(1) { " ++ nm ++ "(); usleep(500); }"
            , "}"
            ]
  )
